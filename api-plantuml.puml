@startuml
!define DONE << (✓,#22B463) done >>
hide stereotype

skinparam class {
  BackgroundColor<<done>>  #C8E6C9
  BorderColor<<done>>      #22B463
  FontColor<<done>>        #145A32
}


left to right direction

enum "CivilityEnum" <<enum>> DONE    {
 M
 MME
 MLLE ' Ou MR, MRS, MS si préféré
 AUTRE
}
enum "GenderEnum" DONE {
 MASCULIN
 FEMININ
 AUTRE
 NON_SPECIFIE
}

class StripeAccount  DONE {
  -stripeId: string
  -isActivated: bool
}

class "ContactInfo" <<ValueObject>> DONE {
    -address1: string
    -address2: string
    -zipcode: string
    -city: string
}

class "Counterparty" <<ValueObject>> DONE {
    -name:string
    -address1: string
    -address2: string
    -zipcode: string
    -city: string
    -country: string
    -vatNumber: string
}

interface "Contactable" DONE {
    +getName() string;
    +getAddress(): string;
    +getZipcode(): string;
    +getCity(): string;
    +getCountry(): string;
}

class Institut DONE <<Entity>>  implements Contactable {
    -label : string
    -siteweb: string
    -socialNetworks: json
    -address: ContactInfo
    -country: Country
    -vatNumber:string
    +getName() string;
    +getAddress(): string;
    +getZipcode(): string;
    +getCity(): string;
    +getCountry(): string;
}


class User DONE implements Contactable  {
    -avatar: string
    -login: string
    -password: string
    -civility: CivilityEnum
    -gender: GenderEnum
    -firstname: string
    -lastname: string
    -contactInfo: ContactInfo
    -country: Country
    -birthday: date
    -nativeCountry: Country
    -nationality: string
    -firstlanguage: string
    -createdAt: datetime
    -updatedAt: datetime
    -previousRegistrationNumber: string
    -inscription: datetime
    -platformRole : PlatformRoleEnum
    +getName() string;
    +getAddress(): string;
    +getZipcode(): string;
    +getCity(): string;
    +getCountry(): string;
}

class InstitutTestOwnership DONE {
    -ownershipType: enum { PROPRIETAIRE, ACHETEUR }
    -purchaseDate: date
}

class Test DONE {
    -label: string
    -ref: string
    -isInternal: bool
    -parent: Test
}

class Level DONE {
    -label: string
    -ref: string
    -description: string
}

class Session <<Entity>> {
    -start: datetime
    -end: datetime
    -limitDateSubscribe: datetime
    -placesAvailable: int
    -validation: bool
}

class Payment <<Entity>> {
    -amount: float
    -status: enum { PENDING, COMPLETED, FAILED }
    -date: datetime
    -method: string
}

class Invoice <<Entity>> {
    -seller: Counterparty
    -buyer: Counterparty
    -amount: float
    -status: string
    -invoiceDate: datetime
    -ref_invoice: string
    -invoiceType: enum { ENROLLMENT, TEST_LICENSE }
}

class InvoiceLine <<Entity>> {
    -label: string
    -price_HT: float
    -tva: float
    -exam: Exam
}



class Enrollment <<Entity>> {
    -registrationDate: datetime
    -hasPaid: bool
    -information: String
}

class Exam <<Entity>> {
    -label: string
    -isWritten: bool
    -isOption: bool
    -price: float
    -coeff: int
    -nbrQuestions: int
    -duration: int
    -successScore: int
    -test: Test
    -level : Level
}

class EnrollmentExam <<Entity>> {
    -finalScore: float
    -status: enum { REGISTERED, PASSED, FAILED }
}

class ScheduledExam <<Entity>> {
    -startDate: datetime
    -location: string
    -room: string
    -priceOverride: float
}

class InstitutExamPricing <<Entity>> {
    -customPrice: float
    -currency: string
    -createdAt: datetime
    -tva: float
    -isActive: bool
}

class Skill <<Entity>> {
    -label: string
    -parent: Skill
}



abstract class Question <<Entity>> {
    -id: int
    -label: string
    -instruction: string
    -duration: int
    -points: int
    -test: Test
    -Level: Level
    -skills:List<Skill>
}


class MCQQuestion {
    +text: string
}

class FillBlankQuestion {
    +text: string
    +blankSymbol: string
    +answers: List<string>
}

class HighlightQuestion {
    +text: string
    +highlights: List<string>
}



class Choice {
    +id: int
    +text: string
    +isCorrect: bool
}

class Media {
    +type: enum {IMAGE, AUDIO, YOUTUBE}
    +url: string
    +description: string
}

class Subject <<Entity>> {
    -titre: string
    -description:string

}


Exam "*" -- "*" Skill
Exam "1" -- "*" ScheduledExam
Exam "1" -- "*" InstitutExamPricing
Enrollment "1" o-- "1" Invoice
Enrollment "1" -- "*" EnrollmentExam
EnrollmentExam "*" -- "1" ScheduledExam

Institut "1" -- "*" InstitutExamPricing
Institut "1" --> "0..1" StripeAccount
Institut "1" -- "*" InstitutTestOwnership
InvoiceLine "*" -- "0..1" Exam
Invoice "1" o-- "1" Payment
Invoice "1" o-- "*" InvoiceLine

Level "1" *-- "0..*" Exam

MCQQuestion o-- "0..*" Choice


Question o-- "0..*" Media : has
Question <|-- MCQQuestion
Question <|-- FillBlankQuestion
Question <|-- HighlightQuestion

Session "*" --> "1" Test
Session "*" --> "1" Level
Session "1" -- "*" Enrollment
Session "1" -- "*" ScheduledExam
ScheduledExam "*" -- "1..*" User : examinators
Skill "0..1" -> "0..1" Skill : parent
Subject "1" -- "1" ScheduledExam
Subject "*" -- "1..*" Question

Test "1" -- "*" InstitutTestOwnership
Test "1" -- "0..*" Test : parent
Test "1" -- "0..*" Skill
Test "1" -- "*" Level


User "1" -- "*" Enrollment





note right of Test
  Un test ne peut être utilisé en Session
  que s’il possède au moins un Skill
  (car les questions sont rattachées à des compétences)
end note



note right of ScheduledExam
  Joue le rôle de classe d'association enrichie
  entre Exam et Session, avec infos de planification
end note

note right of Session
{OCL} self.test.skills->size() >= 1
end note

' ─────────── NOUVEAU SYSTÈME DE RÔLES ───────────

' Portée plateforme (valeur par défaut : USER)
enum "PlatformRoleEnum"  DONE{
  ADMIN
  USER
}

' Portée institut
enum "InstitutRoleEnum"  DONE{
  ADMIN
  TEACHER
  STAFF
}


' Jointure enrichie User ↔ Institut
class InstitutMembership DONE  {
  -role  : InstitutRoleEnum
  -since : datetime
}
' Associations
User     "1" -- "0..1" InstitutMembership : membership
Institut "1"    -- "0..*" InstitutMembership

note right of InstitutMembership
  Contrainte DB : UNIQUE(user, institut)
  ⇒ un utilisateur ne peut appartenir qu’à un seul institut.
end note




@enduml